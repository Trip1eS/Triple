module;
#include "imgui.h"
#include "imgui_impl_glfw.h"
#include "imgui_impl_opengl3.h"
#include <GLFW/glfw3.h>

#include <format>
#include <string>

export module ui;
import triple.all;
using namespace triple;

void setup_imgui(Resource<Window> win) {
    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO();
    (void)io;
    io.ConfigFlags |=
        ImGuiConfigFlags_NavEnableKeyboard; // Enable Keyboard Controls
    io.ConfigFlags |=
        ImGuiConfigFlags_NavEnableGamepad; // Enable Gamepad Controls

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();

    // Setup Platform/Renderer backends
    ImGui_ImplGlfw_InitForOpenGL(win->glfw_window, true);
    ImGui_ImplOpenGL3_Init("#version 130");
}

std::string get_components_name(const ComponentVector& components) {
    using namespace std::string_literals;
    std::string name = "";
    for (auto* component : components) {
        name += component->name() + ", "s;
    }
    return name;
}

void update_imgui(Commands commands, Resource<Time> time) {
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplGlfw_NewFrame();
    ImGui::NewFrame();

    ImGui::ShowDemoWindow();

    {
        ImGui::Begin("Archetypes");
        ImGui::Text(std::format("{}", 1.0f / time->delta()).c_str());

        World& world = commands.world();
        for (auto* archetype : world.archetypes()) {
            if (archetype->size() == 0)
                continue;
            if (ImGui::CollapsingHeader(
                    get_components_name(archetype->components()).c_str()
                )) {}
        }

        ImGui::End();
    }

    ImGui::Render();
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
}

export class UiPlugin : public Plugin {
  public:
    void setup(App& app) {
        app.add_system(StartUp, setup_imgui)
            .add_system(RenderUpdate, update_imgui);
    }
};
