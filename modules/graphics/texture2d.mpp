module;

#include <filesystem>

export module triple.graphics:texture2d;
import :enums;
import triple.base;
import triple.app;

namespace triple::graphics {

export struct SamplerDescriptor {
    SamplerFilter mag_filter {SamplerFilter::Linear};
    SamplerFilter min_filter {SamplerFilter::Linear};
    SamplerAddressMode s_address_mode {SamplerAddressMode::ClampToEdge};
    SamplerAddressMode t_address_mode {SamplerAddressMode::ClampToEdge};
};

export struct TextureDescriptor {
    TextureType texture_type {TextureType::Texture2D};
    PixelFormat texture_format {PixelFormat::RGBA8888};
    TextureUsage texture_usage {TextureUsage::Read};
    int width {0};
    int height {0};
    int depth {0};
    SamplerDescriptor sampler_descriptor {};
    const byte* data {nullptr};
};

export class Texture2D {
  public:
    virtual void update_data(const byte* data, u32 width, u32 height) = 0;
    virtual void apply(u32 index) const = 0;
    virtual int width() const = 0;
    virtual int height() const = 0;
};

} // namespace triple::graphics
