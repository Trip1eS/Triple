module;
#include <glad/glad.h>

export module triple.graphics.opengl:buffer;
import triple.graphics;
import triple.base;
import :utils;

namespace triple::graphics::opengl {

export class BufferOpenGL : public graphics::Buffer {
  public:
    BufferOpenGL(BufferType type, BufferUsage usage) :
        Buffer(type, usage), m_type(convert_buffer_type(type)),
        m_usage(convert_buffer_usage(usage)) {
        glGenBuffers(1, &m_buffer);
    }

    ~BufferOpenGL() {
        if (m_buffer) {
            glDeleteBuffers(1, &m_buffer);
        }
    }

    void update_data(const byte* data, size_t size) override {
        glBindBuffer(m_type, m_buffer);
        glBufferData(m_type, size, data, m_usage);

        opengl_check_error();

        glBindBuffer(m_type, 0);
    }

    GLuint handler() const { return m_buffer; }

  private:
    GLuint m_buffer;
    GLenum m_type;
    GLenum m_usage;
};

} // namespace triple::graphics::opengl
