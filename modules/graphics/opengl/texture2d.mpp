module;
#include <glad/glad.h>

export module triple.graphics.opengl:texture2d;
import triple.graphics;
import triple.base;
import :utils;
import :shader;

namespace triple::graphics::opengl {

export class Texture2DOpenGL : public Texture2D {
  public:
    ~Texture2DOpenGL() {
        if (m_texture) {
            glDeleteTextures(1, &m_texture);
        }
    }

    void init(const TextureDescriptor& desc) override {
        convert_pixel_format(desc.texture_format, m_internal_format, m_image_format, m_data_type);

        m_wrap_s = conver_address_mode(desc.sampler_descriptor.s_address_mode);
        m_wrap_t = conver_address_mode(desc.sampler_descriptor.t_address_mode);

        m_min_filter = conver_filter(desc.sampler_descriptor.min_filter);
        m_mag_filter = conver_filter(desc.sampler_descriptor.mag_filter);

        if (m_texture) {
            glDeleteTextures(1, &m_texture);
        }
        glGenTextures(1, &m_texture);

        update_data(desc.data, desc.width, desc.height);
        opengl_check_error();
    }

    void update_data(const byte* data, u32 width, u32 height) override {
        glBindTexture(GL_TEXTURE_2D, m_texture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, m_wrap_s);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, m_wrap_t);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, m_min_filter);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, m_mag_filter);

        glTexImage2D(GL_TEXTURE_2D, 0, m_internal_format, width, height, 0, m_image_format, m_data_type, data);

        opengl_check_error();

        glBindTexture(GL_TEXTURE_2D, 0);
    }

    void apply(u32 index) const override {
        glActiveTexture(GL_TEXTURE0 + index);
        glBindTexture(GL_TEXTURE_2D, m_texture);
        opengl_check_error();
    }

    GLuint handler() const { return m_texture; }

  private:
    GLuint m_texture {0};
    GLint m_internal_format;
    GLenum m_data_type;
    GLuint m_image_format;
    GLint m_wrap_s, m_wrap_t;
    GLint m_min_filter, m_mag_filter;
};

} // namespace triple::graphics::opengl
