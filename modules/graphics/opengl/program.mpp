module;
#include <glad/glad.h>

#include <string>

export module triple.graphics.opengl:program;
import triple.graphics;
import triple.base;
import :utils;
import :shader;

namespace triple::graphics::opengl {

export class ProgramOpenGL : public graphics::Program {
  public:
    ProgramOpenGL() { m_program = glCreateProgram(); }

    ~ProgramOpenGL() {
        if (m_program) {
            glDeleteProgram(m_program);
        }
    }

    ProgramOpenGL(const ProgramOpenGL&) = delete;
    ProgramOpenGL& operator=(const ProgramOpenGL&) = delete;

    bool link(const Shader& fragShader, const Shader& vertShader) override {
        glAttachShader(m_program, static_cast<const ShaderOpenGL&>(fragShader).handler());
        glAttachShader(m_program, static_cast<const ShaderOpenGL&>(vertShader).handler());

        glLinkProgram(m_program);

        GLint status = 0;
        glGetProgramiv(m_program, GL_LINK_STATUS, &status);
        if (status == GL_FALSE) {
            GLint logLength;
            glGetProgramiv(m_program, GL_INFO_LOG_LENGTH, &logLength);
            std::string log;
            log.resize(logLength);
            glGetProgramInfoLog(m_program, logLength, nullptr, log.data());
            log::error("Failed to link program\n{}", log);
            return false;
        }
        return opengl_check_error();
    }

    GLuint handler() const { return m_program; }

  private:
    GLuint m_program;
};

} // namespace triple::graphics::opengl
