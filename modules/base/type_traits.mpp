module;
#include <array>
#include <type_traits>

export module triple.base:type_traits;

namespace triple {

template<class T, template<class...> class Template>
struct is_specialization_impl : std::false_type {};

template<template<class...> class Template, class... Args>
struct is_specialization_impl<Template<Args...>, Template> : std::true_type {};

export template<class T, template<class...> class Template>
concept is_specialization = is_specialization_impl<T, Template>::value;

export template<class T, typename... Ts>
constexpr std::size_t index_in_args() {
    constexpr std::array<bool, sizeof...(Ts)> a {{std::is_same<T, Ts>::value...}
    };
    const auto it = std::find(a.begin(), a.end(), true);
    return std::distance(a.begin(), it);
}

} // namespace triple
