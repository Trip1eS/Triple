module;
#include <cstdint>
#include <cstdlib>
#include <vector>

export module triple.ecs:utils;
import triple.refl;

namespace triple::ecs {

export struct Uint32VectorHasher {
    std::size_t operator()(const std::vector<std::uint32_t>& v) const {
        std::size_t seed = v.size();
        for (auto x : v) {
            x = ((x >> 16) ^ x) * 0x45d9f3b;
            x = ((x >> 16) ^ x) * 0x45d9f3b;
            x = (x >> 16) ^ x;
            seed ^= x + 0x9e3779b9 + (seed << 6) + (seed >> 2);
        }
        return seed;
    }
};

export struct TypeVectorHasher {
    std::size_t operator()(const std::vector<const refl::Type*>& v) const {
        std::size_t seed = v.size();
        for (auto& t : v) {
            std::size_t x = t->id();
            x = ((x >> 16) ^ x) * 0x45d9f3b;
            x = ((x >> 16) ^ x) * 0x45d9f3b;
            x = (x >> 16) ^ x;
            seed ^= x + 0x9e3779b9 + (seed << 6) + (seed >> 2);
        }
        return seed;
    }
};

} // namespace triple::ecs