module;
#include <utility>

export module triple.ecs:commands;
import triple.refl;
import triple.base;
import :entity;

namespace triple::ecs {

export class World;

export class EntityCommands {
  public:
    EntityCommands(World& world, Entity entity);

    EntityCommands& add(refl::Value component);
    EntityCommands& remove(const refl::Type& component_type);
    bool has_component(const refl::Type& component_type);
    void despawn();
    Entity id();

    template<class C, class... Cs>
        requires(sizeof...(Cs) > 0)
    EntityCommands& add(C&& component, Cs&&... components) {
        add(std::forward<C>(component));
        add(std::forward<Cs>(components)...);
        return *this;
    }

    template<class C>
    EntityCommands& remove() {
        return remove(refl::type<C>());
    }

    template<class T>
    bool has_component() {
        return has_component(refl::type<T>());
    }

  private:
    World& m_world;
    Entity m_entity;
};

export class Commands {
  public:
    Commands(World& world);

    EntityCommands spawn();
    EntityCommands entity(Entity id);
    World& world() { return m_world; }

  private:
    World& m_world;
};

} // namespace triple::ecs
