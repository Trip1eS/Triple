module;
#include "refl_macros.hpp"
#include <chrono>

export module triple.core:time;
import triple.app;
import triple.ecs;
import triple.refl;

namespace triple::core {

export struct Time {
    void tick() {
        auto now = std::chrono::steady_clock::now();
        auto duration =
            std::chrono::duration_cast<std::chrono::duration<float>>(
                now - m_last_tick_time
            )
                .count();
        m_delta_time = duration * time_scale;
        m_last_tick_time = now;
    }

    float delta() const { return m_delta_time; }

    float time_scale {1.0f};

  private:
    std::chrono::steady_clock::time_point m_last_tick_time {
        std::chrono::steady_clock::now()
    };
    float m_delta_time = 0.0f;
};

export enum TimerMode {
    Once,
    Repeating,
};

export class Timer {
  public:
    Timer(float duration_seconds, TimerMode mode) :
        duration(duration_seconds), mode(mode) {}

    void tick(float delta) {
        if (m_just_finished) {
            m_just_finished = false;
        }
        m_time += delta;
        if (m_time >= duration) {
            m_time -= duration;
            m_just_finished = true;
        }
    }

    bool just_finished() const { return m_just_finished; }

    float duration;
    TimerMode mode;

  private:
    float m_time {0.0f};
    bool m_just_finished {false};
};

void time_system(ecs::Resource<Time> time) {
    time->tick();
}

} // namespace triple::core

REFL(triple::core::Time)
REFL(triple::core::Timer)

namespace triple::core {
export class TimePlugin : public app::Plugin {
  public:
    void setup(app::App& app) {
        app.add_resource<Time>();
        app.add_system(app::First, time_system);
    }
};
} // namespace triple::core
