module;
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include "refl_macros.hpp"

#include <stdexcept>
#include <string>

export module triple.window:window;
import triple.app;
import triple.ecs;
import triple.refl;

namespace triple::window {

export struct Window {
    GLFWwindow* glfw_window;
    int width, height;
};

GLFWwindow* setup_glfw(int width, int height, const std::string& title) {
    if (!glfwInit()) {
        throw std::runtime_error("Failed to initialize GLFW");
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* win =
        glfwCreateWindow(width, height, title.c_str(), nullptr, nullptr);
    if (!win) {
        throw std::runtime_error("Failed to create window");
    }

    glfwMakeContextCurrent(win);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        throw std::runtime_error("Failed to initialize GLAD");
    }

    return win;
}

void window_prepare(ecs::Resource<Window> win_res) {
    glfwPollEvents();
    Window& win = *win_res;
    glfwGetFramebufferSize(win.glfw_window, &win.width, &win.height);
}

void swap_buffers(ecs::Resource<Window> win) {
    glfwSwapBuffers(win->glfw_window);
}

void update_should_close(
    ecs::Resource<Window> win,
    ecs::Resource<app::AppStates> app_states
) {
    app_states->should_stop = glfwWindowShouldClose(win->glfw_window);
}

export class WindowPlugin : public app::Plugin {
  public:
    void setup(app::App& app) {
        int width = 1920, height = 1080;
        app.add_resource(Window {
            .glfw_window = setup_glfw(width, height, "Triple Engine"),
            .width = width,
            .height = height,
        });
        app.add_system(app::First, window_prepare);
        // app.add_system(app::RenderEnd, swap_buffers);
        app.add_system(app::Last, update_should_close);
    }
};

} // namespace triple::window

REFL(triple::window::Window)
