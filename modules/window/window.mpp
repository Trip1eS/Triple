module;
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <stdexcept>

export module triple.window;
import triple.app;
import triple.ecs;

namespace triple::window {

export struct Window {
    GLFWwindow* glfw_window;
};

GLFWwindow* setup_glfw() {
    if (!glfwInit()) {
        throw std::runtime_error("Failed to initialize GLFW");
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* win = glfwCreateWindow(1280, 720, "Triple", nullptr, nullptr);
    if (!win) {
        throw std::runtime_error("Failed to create window");
    }

    glfwMakeContextCurrent(win);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        throw std::runtime_error("Failed to initialize GLAD");
    }

    return win;
}

void poll_events() {
    glfwPollEvents();
}

void swap_buffers(ecs::Resource<Window> win) {
    glfwSwapBuffers(win->glfw_window);
}

void update_should_close(ecs::Resource<Window> win, ecs::Resource<app::AppStates> app_states) {
    app_states->should_stop = glfwWindowShouldClose(win->glfw_window);
}

export class WindowPlugin : public app::Plugin {
  public:
    void setup(app::App& app) {
        app.add_resource(Window {.glfw_window = setup_glfw()});
        app.add_system(app::PreUpdate, poll_events);
        app.add_system(app::PostUpdate, swap_buffers);
        app.add_system(app::PostUpdate, update_should_close);
    }
};

} // namespace triple::window
